name: auto complete fields and validate pr

on:
  pull_request:
    types:
      - opened
      - synchronize
      - edited

jobs:
  assign_and_label:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: get pr commits
        id: pr_commits
        run: |
          pr_commits=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "${{ github.event.pull_request.commits_url }}")
          echo "::set-output name=pr_commits::$pr_commits"

      - name: get current version
        id: get-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $VERSION"
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: assign user and add labels
        uses: actions/github-script@v5
        with:
          script: |
            console.log('start scripting...')
            const commitsResponse = await github.rest.pulls.listCommits({ owner: context.repo.owner, repo: context.repo.repo, pull_number: context.issue.number });
            const commitMessages = commitsResponse.data.map(commit => commit.commit.message.toLowerCase());

            const { owner, repo, number } = context.issue;
            const prAuthor = context.payload.pull_request.user.login;

            await github.rest.issues.addAssignees({ owner, repo, issue_number: number, assignees: [prAuthor] });

            // add labels in pr
            const labelsToAdd = [];

            for (const message of commitMessages) {
              if (message.includes("fix")) { labelsToAdd.push("bug"); }
              if (message.includes("feat")) { labelsToAdd.push("feature"); }
              if (message.includes("docs")) { labelsToAdd.push("documentation"); }
              if (message.includes("refactor")) { labelsToAdd.push("enhancement"); }
              if (message.includes("chore")) { labelsToAdd.push("help wanted"); }
            }

            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: labelsToAdd });
            }


            // added commits on pull request
            let updatedBody = (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })).data.body;

            const verifyIfNeedAddsResolve = (updatedBodyLocal) => {
              if(!updatedBodyLocal.includes('[...autoGenerate]')) {
                return updatedBodyLocal
              }

              let newContent = ''
              for (const message of commitMessages) {
                if (!updatedBodyLocal.includes(message)) {
                  newContent += `- ${message}\n`;
                }
              }

              if(newContent === '') {
                return updatedBodyLocal
              }

              newContent = newContent + '[...autoGenerate]'
              return updatedBodyLocal.replace('[...autoGenerate]', newContent)
            }

            const newUpdatedBody = verifyIfNeedAddsResolve(updatedBody)

            // update body on pull request
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: newUpdatedBody
            });


            // update pr title
            const version = process.env.TAG_VERSION;

            const currentTitle = context.payload.pull_request.title;
            const newTitle = `Release ${version} - ${currentTitle}`;

            if(currentTitle !== 'Release') {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: newTitle
              });
            }

  validate_pr_title_and_body:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v2

      - name: check pr title and body
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          pr_body="${{ github.event.pull_request.body }}"
          default_title="Update README.md"

          pr_template=$(cat .github/pull-request-template.md)
          if [[ "$pr_title" == "$default_title" ]]; then
            echo "error: pr title is not updated."
            exit 1
          fi
          pr_body_cleaned=$(echo "$pr_body" | tr -d '[:space:]')
          pr_template_cleaned=$(echo "$pr_template" | tr -d '[:space:]')
          if [[ "$pr_body_cleaned" == "$pr_template_cleaned" ]]; then
            echo "error: pr body is the same as the template."
            exit 1
          fi

      - name: create comment
        if: ${{ failure() }}
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const body = `Oi üßë‚Äçüíª\n\nAtualiza o PR ai beleza?`;
            await github.rest.issues.createComment({ owner, repo, issue_number: number, body });
